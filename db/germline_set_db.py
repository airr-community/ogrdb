
# ORM definitions for GermlineSet
# This file is automatically generated from the schema by schema/build_from_schema.py

from head import db
from db.userdb import User
from db.styled_table import *
from flask_table import Table, Col, LinkCol, create_table
from db.view_table import ViewCol
from sqlalchemy.orm import backref

                        
gene_descriptions_germline_sets = db.Table('gene_descriptions_germline_sets',
    db.Column('gene_descriptions_id', db.Integer(), db.ForeignKey('gene_description.id')),
    db.Column('germline_sets_id', db.Integer(), db.ForeignKey('germline_set.id')))
    

from db._germline_set_db import *

class GermlineSet(db.Model, GermlineSetMixin):
    id = db.Column(db.Integer, primary_key=True)
    germline_set_id = db.Column(db.String(1000))
    author = db.Column(db.String(1000))
    lab_name = db.Column(db.String(1000))
    lab_address = db.Column(db.String(1000))
    germline_set_name = db.Column(db.String(1000))
    germline_set_ref = db.Column(db.String(1000))
    status = db.Column(db.String(255))
    species = db.Column(db.String(1000))
    species_subgroup = db.Column(db.String(1000))
    species_subgroup_type = db.Column(db.String(255))
    locus = db.Column(db.String(255))
    release_version = db.Column(db.Integer)
    release_description = db.Column(db.String(1000))
    release_date = db.Column(db.String(1000))
    zenodo_base_deposition = db.Column(db.String(1000))
    zenodo_current_deposition = db.Column(db.String(1000))
    doi = db.Column(db.String(1000))

    gene_descriptions = db.relationship('GeneDescription', secondary = gene_descriptions_germline_sets, backref = db.backref('germline_sets', lazy='dynamic'))


def save_GermlineSet(db, object, form, new=False):   
    object.author = form.author.data
    object.lab_name = form.lab_name.data
    object.lab_address = form.lab_address.data
    object.germline_set_name = form.germline_set_name.data
    object.species = form.species.data
    object.species_subgroup = form.species_subgroup.data
    object.species_subgroup_type = form.species_subgroup_type.data
    object.locus = form.locus.data
    object.release_description = form.release_description.data
    object.doi = form.doi.data

    if new:
        db.session.add(object)
        
    db.session.commit()   



def populate_GermlineSet(db, object, form):   
    form.author.data = object.author
    form.lab_name.data = object.lab_name
    form.lab_address.data = object.lab_address
    form.germline_set_name.data = object.germline_set_name
    form.species.data = object.species
    form.species_subgroup.data = object.species_subgroup
    form.species_subgroup_type.data = object.species_subgroup_type
    form.locus.data = object.locus
    form.release_description.data = object.release_description
    form.doi.data = object.doi




def copy_GermlineSet(c_from, c_to):   
    c_to.germline_set_id = c_from.germline_set_id
    c_to.author = c_from.author
    c_to.lab_name = c_from.lab_name
    c_to.lab_address = c_from.lab_address
    c_to.germline_set_name = c_from.germline_set_name
    c_to.germline_set_ref = c_from.germline_set_ref
    c_to.status = c_from.status
    c_to.species = c_from.species
    c_to.species_subgroup = c_from.species_subgroup
    c_to.species_subgroup_type = c_from.species_subgroup_type
    c_to.locus = c_from.locus
    c_to.release_version = c_from.release_version
    c_to.release_description = c_from.release_description
    c_to.release_date = c_from.release_date
    c_to.zenodo_base_deposition = c_from.zenodo_base_deposition
    c_to.zenodo_current_deposition = c_from.zenodo_current_deposition
    c_to.doi = c_from.doi



class GermlineSet_table(StyledTable):
    id = Col("id", show=False)
    species = StyledCol("Species", tooltip="Binomial designation of subject's species")
    species_subgroup = StyledCol("Species subgroup", tooltip="Race, strain or other species subgroup to which this subject belongs")
    locus = StyledCol("Locus", tooltip="Gene locus")
    release_version = StyledCol("Release Version", tooltip="Version number of this record, allocated automatically")
    release_date = StyledCol("Release Date", tooltip="Date of this release")
    doi = StyledCol("doi", tooltip="DOI of germline set deposition at Zenodo")


def make_GermlineSet_table(results, private = False, classes=()):
    t = create_table(base=GermlineSet_table)
    ret = t(results, classes=classes)
    return ret

class GermlineSet_view(Table):
    item = ViewCol("", column_html_attrs={"class": "col-sm-3 text-right font-weight-bold view-table-row"})
    value = Col("")


def make_GermlineSet_view(sub, private = False):
    ret = GermlineSet_view([])
    ret.items.append({"item": "Author", "value": sub.author, "tooltip": "Corresponding author", "field": "author"})
    ret.items.append({"item": "Lab Name", "value": sub.lab_name, "tooltip": "Department of corresponding author", "field": "lab_name"})
    ret.items.append({"item": "Lab Address", "value": sub.lab_address, "tooltip": "Institutional address of corresponding author", "field": "lab_address"})
    ret.items.append({"item": "Name", "value": sub.germline_set_name, "tooltip": "descriptive name of this germline set", "field": "germline_set_name"})
    ret.items.append({"item": "Species", "value": sub.species, "tooltip": "Binomial designation of subject's species", "field": "species"})
    ret.items.append({"item": "Species subgroup", "value": sub.species_subgroup, "tooltip": "Race, strain or other species subgroup to which this subject belongs", "field": "species_subgroup"})
    ret.items.append({"item": "Subgroup type", "value": sub.species_subgroup_type, "tooltip": "Category of subgroup", "field": "species_subgroup_type"})
    ret.items.append({"item": "Locus", "value": sub.locus, "tooltip": "Gene locus", "field": "locus"})
    ret.items.append({"item": "Release Version", "value": sub.release_version, "tooltip": "Version number of this record, allocated automatically", "field": "release_version"})
    ret.items.append({"item": "Release Description", "value": sub.release_description, "field": "release_description"})
    ret.items.append({"item": "Release Date", "value": sub.release_date, "tooltip": "Date of this release", "field": "release_date"})
    ret.items.append({"item": "doi", "value": sub.doi, "tooltip": "DOI of germline set deposition at Zenodo", "field": "doi"})
    return ret

