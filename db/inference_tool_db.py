
# ORM definitions for InferenceTool
# This file is automatically generated from the schema by schema/build_from_schema.py

from head import db
from db.userdb import User
from db.styled_table import *
from flask_table import Table, Col, LinkCol, create_table
from db.view_table import ViewCol
from sqlalchemy.orm import backref

from db._inference_tool_db import *

class InferenceTool(db.Model, InferenceToolMixin):
    id = db.Column(db.Integer, primary_key=True)
    tool_settings_name = db.Column(db.String(1000))
    tool_name = db.Column(db.String(1000))
    tool_version = db.Column(db.String(1000))
    tool_starting_database = db.Column(db.Text())
    tool_settings = db.Column(db.Text())
    submission_id = db.Column(db.Integer, db.ForeignKey('submission.id'))
    submission = db.relationship('Submission', backref = 'inference_tools')


def save_InferenceTool(db, object, form, new=False):   
    object.tool_settings_name = form.tool_settings_name.data
    object.tool_name = form.tool_name.data
    object.tool_version = form.tool_version.data
    object.tool_starting_database = form.tool_starting_database.data
    object.tool_settings = form.tool_settings.data

    if new:
        db.session.add(object)
        
    db.session.commit()   



def populate_InferenceTool(db, object, form):   
    form.tool_settings_name.data = object.tool_settings_name
    form.tool_name.data = object.tool_name
    form.tool_version.data = object.tool_version
    form.tool_starting_database.data = object.tool_starting_database
    form.tool_settings.data = object.tool_settings




def copy_InferenceTool(c_from, c_to):   
    c_to.tool_settings_name = c_from.tool_settings_name
    c_to.tool_name = c_from.tool_name
    c_to.tool_version = c_from.tool_version
    c_to.tool_starting_database = c_from.tool_starting_database
    c_to.tool_settings = c_from.tool_settings



class InferenceTool_table(StyledTable):
    id = Col("id", show=False)
    tool_settings_name = StyledCol("Tool/Settings Name", tooltip="Descriptive name for this combination of tool and settings")
    tool_name = StyledCol("Tool Name", tooltip="Name of the inference tool")
    tool_version = StyledCol("Tool Version", tooltip="Version of the inference tool")


def make_InferenceTool_table(results, private = False, classes=()):
    t = create_table(base=InferenceTool_table)
    ret = t(results, classes=classes)
    return ret

class InferenceTool_view(Table):
    item = ViewCol("", column_html_attrs={"class": "view-table-row"})
    value = Col("")


def make_InferenceTool_view(sub, private = False):
    ret = InferenceTool_view([])
    ret.items.append({"item": "Tool/Settings Name", "value": sub.tool_settings_name, "tooltip": "Descriptive name for this combination of tool and settings", "field": "tool_settings_name"})
    ret.items.append({"item": "Tool Name", "value": sub.tool_name, "tooltip": "Name of the inference tool", "field": "tool_name"})
    ret.items.append({"item": "Tool Version", "value": sub.tool_version, "tooltip": "Version of the inference tool", "field": "tool_version"})
    ret.items.append({"item": "Starting Database", "value": sub.tool_starting_database, "tooltip": "Starting germline database used by the tool (please specify where and when it was obtained, name, and version id, if any)", "field": "tool_starting_database"})
    ret.items.append({"item": "Settings", "value": sub.tool_settings, "tooltip": "Settings/configuration of the tool when used to provide the inferences", "field": "tool_settings"})
    return ret

