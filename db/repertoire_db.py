
# ORM definitions for PubId
# This file is automatically generated from the schema by schema/build_from_schema.py

from app import db
from db.userdb import User
from db.styled_table import *
from flask_table import Table, Col, LinkCol, create_table
from db.view_table import ViewCol
from sqlalchemy.orm import backref

class PubId(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    pubmed_id = db.Column(db.String(1000))
    pub_title = db.Column(db.Text())
    pub_authors = db.Column(db.Text())
    repertoire_id = db.Column(db.Integer, db.ForeignKey('repertoire.id'))
    repertoire = db.relationship('Repertoire', backref = 'pub_ids')
    sequence_id = db.Column(db.Integer, db.ForeignKey('gene_description.id'))
    gene_description = db.relationship('GeneDescription', backref = 'pub_ids')


def save_PubId(db, object, form, new=False):   
    object.pubmed_id = form.pubmed_id.data

    if new:
        db.session.add(object)
        
    db.session.commit()   



def populate_PubId(db, object, form):   
    form.pubmed_id.data = object.pubmed_id




def copy_PubId(c_from, c_to):   
    c_to.pubmed_id = c_from.pubmed_id
    c_to.pub_title = c_from.pub_title
    c_to.pub_authors = c_from.pub_authors



class PubId_table(StyledTable):
    id = Col("id", show=False)
    pubmed_id = StyledCol("PubMed ID", tooltip="PubMed ID (e.g. 26543)")
    pub_title = StyledCol("Title", tooltip="Publication Title")
    pub_authors = StyledCol("Authors", tooltip="Author list")


def make_PubId_table(results, private = False, classes=()):
    t=create_table(base=PubId_table)
    ret = t(results, classes=classes)
    return ret

class PubId_view(Table):
    item = ViewCol("", column_html_attrs={"class": "col-sm-3 text-right font-weight-bold view-table-row"})
    value = Col("")


def make_PubId_view(sub, private = False):
    ret = PubId_view([])
    ret.items.append({"item": "PubMed ID", "value": sub.pubmed_id, "tooltip": "PubMed ID (e.g. 26543)", "field": "pubmed_id"})
    return ret


class Acknowledgements(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    ack_name = db.Column(db.String(1000))
    ack_institution_name = db.Column(db.String(1000))
    ack_ORCID_id = db.Column(db.String(255))
    submission_id = db.Column(db.Integer, db.ForeignKey('submission.id'))
    submission = db.relationship('Submission', backref = 'acknowledgements')
    description_id = db.Column(db.Integer, db.ForeignKey('gene_description.id'))
    gene_description = db.relationship('GeneDescription', backref = 'acknowledgements')


def save_Acknowledgements(db, object, form, new=False):   
    object.ack_name = form.ack_name.data
    object.ack_institution_name = form.ack_institution_name.data
    object.ack_ORCID_id = form.ack_ORCID_id.data

    if new:
        db.session.add(object)
        
    db.session.commit()   



def populate_Acknowledgements(db, object, form):   
    form.ack_name.data = object.ack_name
    form.ack_institution_name.data = object.ack_institution_name
    form.ack_ORCID_id.data = object.ack_ORCID_id




def copy_Acknowledgements(c_from, c_to):   
    c_to.ack_name = c_from.ack_name
    c_to.ack_institution_name = c_from.ack_institution_name
    c_to.ack_ORCID_id = c_from.ack_ORCID_id



class Acknowledgements_table(StyledTable):
    id = Col("id", show=False)
    ack_name = StyledCol("Name", tooltip="Name of individual to be acknowledged as contributing to this work")
    ack_institution_name = StyledCol("Institution", tooltip="Individual's department and institution name")
    ack_ORCID_id = StyledCol("ORCID ID", tooltip="Individual's ORCID Id, if available")


def make_Acknowledgements_table(results, private = False, classes=()):
    t=create_table(base=Acknowledgements_table)
    ret = t(results, classes=classes)
    return ret

class Acknowledgements_view(Table):
    item = ViewCol("", column_html_attrs={"class": "col-sm-3 text-right font-weight-bold view-table-row"})
    value = Col("")


def make_Acknowledgements_view(sub, private = False):
    ret = Acknowledgements_view([])
    ret.items.append({"item": "Name", "value": sub.ack_name, "tooltip": "Name of individual to be acknowledged as contributing to this work", "field": "ack_name"})
    ret.items.append({"item": "Institution", "value": sub.ack_institution_name, "tooltip": "Individual's department and institution name", "field": "ack_institution_name"})
    ret.items.append({"item": "ORCID ID", "value": sub.ack_ORCID_id, "tooltip": "Individual's ORCID Id, if available", "field": "ack_ORCID_id"})
    return ret


from db._repertoire_db import *

class Repertoire(db.Model, RepertoireMixin):
    id = db.Column(db.Integer, primary_key=True)
    repository_name = db.Column(db.String(1000))
    rep_accession_no = db.Column(db.String(1000))
    dataset_url = db.Column(db.String(500))
    miarr_compliant = db.Column(db.String(255))
    miairr_link = db.Column(db.String(500))
    sequencing_platform = db.Column(db.String(1000))
    read_length = db.Column(db.String(1000))
    primers_overlapping = db.Column(db.String(255))
    submission_id = db.Column(db.Integer, db.ForeignKey('submission.id'))
    submission = db.relationship('Submission', backref = 'repertoire')


def save_Repertoire(db, object, form, new=False):   
    object.repository_name = form.repository_name.data
    object.rep_accession_no = form.rep_accession_no.data
    object.dataset_url = form.dataset_url.data
    object.miarr_compliant = form.miarr_compliant.data
    object.miairr_link = form.miairr_link.data
    object.sequencing_platform = form.sequencing_platform.data
    object.read_length = form.read_length.data
    object.primers_overlapping = form.primers_overlapping.data

    if new:
        db.session.add(object)
        
    db.session.commit()   



def populate_Repertoire(db, object, form):   
    form.repository_name.data = object.repository_name
    form.rep_accession_no.data = object.rep_accession_no
    form.dataset_url.data = object.dataset_url
    form.miarr_compliant.data = object.miarr_compliant
    form.miairr_link.data = object.miairr_link
    form.sequencing_platform.data = object.sequencing_platform
    form.read_length.data = object.read_length
    form.primers_overlapping.data = object.primers_overlapping




def copy_Repertoire(c_from, c_to):   
    c_to.repository_name = c_from.repository_name
    c_to.rep_accession_no = c_from.rep_accession_no
    c_to.dataset_url = c_from.dataset_url
    c_to.miarr_compliant = c_from.miarr_compliant
    c_to.miairr_link = c_from.miairr_link
    c_to.sequencing_platform = c_from.sequencing_platform
    c_to.read_length = c_from.read_length
    c_to.primers_overlapping = c_from.primers_overlapping



class Repertoire_table(StyledTable):
    id = Col("id", show=False)


def make_Repertoire_table(results, private = False, classes=()):
    t=create_table(base=Repertoire_table)
    ret = t(results, classes=classes)
    return ret

class Repertoire_view(Table):
    item = ViewCol("", column_html_attrs={"class": "col-sm-3 text-right font-weight-bold view-table-row"})
    value = Col("")


def make_Repertoire_view(sub, private = False):
    ret = Repertoire_view([])
    ret.items.append({"item": "Repository", "value": sub.repository_name, "tooltip": "Name of the repository holding the sequence dataset (e.g. NIH SRA, or ENA)", "field": "repository_name"})
    ret.items.append({"item": "Accession Number", "value": sub.rep_accession_no, "tooltip": "Accession number or serial number within the repository - NIH Project or ENA Study (e.g. SRP081761)", "field": "rep_accession_no"})
    ret.items.append({"item": "Dataset URL", "value": sub.dataset_url, "tooltip": "URL of the study or project within the repository", "field": "dataset_url"})
    ret.items.append({"item": "MiAIRR Compliant?", "value": sub.miarr_compliant, "tooltip": "Yes if the repertoire dataset and associated metadata is available in MiAIRR format", "field": "miarr_compliant"})
    ret.items.append({"item": "MiAIRR URL", "value": sub.miairr_link, "tooltip": "Link to MiAIRR metadata, if available", "field": "miairr_link"})
    ret.items.append({"item": "Sequencing Platform", "value": sub.sequencing_platform, "tooltip": "Designation of sequencing instrument used", "field": "sequencing_platform"})
    ret.items.append({"item": "Read Length", "value": sub.read_length, "tooltip": "Read length in bases for each direction", "field": "read_length"})
    ret.items.append({"item": "Primers Overlapping?", "value": sub.primers_overlapping, "tooltip": "Do primers overlap with the stated sequence of any inferred allele?", "field": "primers_overlapping"})
    return ret

