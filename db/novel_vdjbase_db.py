
# ORM definitions for NovelVdjbase
# This file is automatically generated from the schema by schema/build_from_schema.py

from app import db
from db.userdb import User
from db.styled_table import *
from flask_table import Table, Col, LinkCol, create_table
from db.view_table import ViewCol
from sqlalchemy.orm import backref

class NovelVdjbase(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    vdjbase_name = db.Column(db.String(200))
    species = db.Column(db.String(100))
    locus = db.Column(db.String(100))
    first_seen = db.Column(db.DateTime)
    last_seen = db.Column(db.DateTime)
    status = db.Column(db.String(50))
    last_updated = db.Column(db.DateTime)
    updated_by = db.Column(db.String(100))
    sequence = db.Column(db.String(500))
    subject_count = db.Column(db.Integer)
    j_haplotypes = db.Column(db.Integer)
    d_haplotypes = db.Column(db.Integer)
    hetero_alleleic_j_haplotypes = db.Column(db.Integer)
    example = db.Column(db.String(200))
    notes = db.Column(db.Text())


def save_NovelVdjbase(db, object, form, new=False):   
    object.vdjbase_name = form.vdjbase_name.data
    object.species = form.species.data
    object.locus = form.locus.data
    object.first_seen = form.first_seen.data
    object.last_seen = form.last_seen.data
    object.status = form.status.data
    object.last_updated = form.last_updated.data
    object.updated_by = form.updated_by.data
    object.notes = form.notes.data

    if new:
        db.session.add(object)
        
    db.session.commit()   



def populate_NovelVdjbase(db, object, form):   
    form.vdjbase_name.data = object.vdjbase_name
    form.species.data = object.species
    form.locus.data = object.locus
    form.first_seen.data = object.first_seen
    form.last_seen.data = object.last_seen
    form.status.data = object.status
    form.last_updated.data = object.last_updated
    form.updated_by.data = object.updated_by
    form.notes.data = object.notes




def copy_NovelVdjbase(c_from, c_to):   
    c_to.vdjbase_name = c_from.vdjbase_name
    c_to.species = c_from.species
    c_to.locus = c_from.locus
    c_to.first_seen = c_from.first_seen
    c_to.last_seen = c_from.last_seen
    c_to.status = c_from.status
    c_to.last_updated = c_from.last_updated
    c_to.updated_by = c_from.updated_by
    c_to.notes = c_from.notes



class NovelVdjbase_table(StyledTable):
    id = Col("id", show=False)
    locus = StyledCol("Locus", tooltip="Gene locus")


def make_NovelVdjbase_table(results, private = False, classes=()):
    t = create_table(base=NovelVdjbase_table)
    ret = t(results, classes=classes)
    return ret

class NovelVdjbase_view(Table):
    item = ViewCol("", column_html_attrs={"class": "col-sm-3 text-right font-weight-bold view-table-row"})
    value = Col("")


def make_NovelVdjbase_view(sub, private = False):
    ret = NovelVdjbase_view([])
    ret.items.append({"item": "vdjbase_name", "value": sub.vdjbase_name, "tooltip": "Allele name (as recorded in VDJbase)", "field": "vdjbase_name"})
    ret.items.append({"item": "species", "value": sub.species, "tooltip": "Species", "field": "species"})
    ret.items.append({"item": "Locus", "value": sub.locus, "tooltip": "Gene locus", "field": "locus"})
    ret.items.append({"item": "first_seen", "value": sub.first_seen, "tooltip": "Date VDJbase record was first seen", "field": "first_seen"})
    ret.items.append({"item": "last_seen", "value": sub.last_seen, "tooltip": "Date VDJbase record was last seen", "field": "last_seen"})
    ret.items.append({"item": "status", "value": sub.status, "tooltip": "Review status", "field": "status"})
    ret.items.append({"item": "last_updated", "value": sub.last_updated, "tooltip": "Date the comments or status were last updated", "field": "last_updated"})
    ret.items.append({"item": "updated_by", "value": sub.updated_by, "tooltip": "Name of last updater", "field": "updated_by"})
    ret.items.append({"item": "Notes", "value": sub.notes, "tooltip": "Notes from OGRDB reviewers", "field": "notes"})
    return ret

