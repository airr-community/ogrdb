
# ORM definitions for GeneDescription
# This file is automatically generated from the schema by schema/build_from_schema.py

from app import db
from db.userdb import User
from db.styled_table import *
from flask_table import Table, Col, LinkCol, create_table
from db.view_table import ViewCol
from sqlalchemy.orm import backref

class GeneDescription(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    description_id = db.Column(db.String(1000))
    author = db.Column(db.String(1000))
    lab_address = db.Column(db.String(1000))
    release_version = db.Column(db.Integer)
    release_date = db.Column(db.DateTime)
    release_description = db.Column(db.Text())
    organism = db.Column(db.String(1000))
    sequence_name = db.Column(db.String(1000))

    locus = db.Column(db.String(255))
    domain = db.Column(db.String(255))
    functional = db.Column(db.Boolean)
    inference_type = db.Column(db.String(255))
    affirmation_level = db.Column(db.String(255))
    status = db.Column(db.String(255))
    gene_subgroup = db.Column(db.String(1000))
    subgroup_designation = db.Column(db.String(1000))
    allele_designation = db.Column(db.String(1000))
    sequence = db.Column(db.Text())
    coding_seq_imgt = db.Column(db.Text())
    codon_frame = db.Column(db.String(255))
    j_cdr3_end = db.Column(db.Integer)
    utr_5_prime_start = db.Column(db.Integer)
    utr_5_prime_end = db.Column(db.Integer)
    l_region_start = db.Column(db.Integer)
    l_region_end = db.Column(db.Integer)
    v_rs_start = db.Column(db.Integer)
    v_rs_end = db.Column(db.Integer)
    d_rs_3_prime_start = db.Column(db.Integer)
    d_rs_3_prime_end = db.Column(db.Integer)
    d_rs_5_prime_start = db.Column(db.Integer)
    d_rs_5_prime_end = db.Column(db.Integer)
    j_rs_start = db.Column(db.Integer)
    j_rs_end = db.Column(db.Integer)

    notes = db.Column(db.Text())


def save_GeneDescription(db, object, form, new=False):   
    object.description_id = form.description_id.data
    object.author = form.author.data
    object.lab_address = form.lab_address.data
    object.release_version = form.release_version.data
    object.release_date = form.release_date.data
    object.release_description = form.release_description.data
    object.organism = form.organism.data
    object.sequence_name = form.sequence_name.data
    object.alt_names = form.alt_names.data
    object.locus = form.locus.data
    object.domain = form.domain.data
    object.functional = form.functional.data
    object.inference_type = form.inference_type.data
    object.affirmation_level = form.affirmation_level.data
    object.status = form.status.data
    object.gene_subgroup = form.gene_subgroup.data
    object.subgroup_designation = form.subgroup_designation.data
    object.allele_designation = form.allele_designation.data
    object.sequence = form.sequence.data
    object.coding_seq_imgt = form.coding_seq_imgt.data
    object.codon_frame = form.codon_frame.data
    object.j_cdr3_end = form.j_cdr3_end.data
    object.utr_5_prime_start = form.utr_5_prime_start.data
    object.utr_5_prime_end = form.utr_5_prime_end.data
    object.l_region_start = form.l_region_start.data
    object.l_region_end = form.l_region_end.data
    object.v_rs_start = form.v_rs_start.data
    object.v_rs_end = form.v_rs_end.data
    object.d_rs_3_prime_start = form.d_rs_3_prime_start.data
    object.d_rs_3_prime_end = form.d_rs_3_prime_end.data
    object.d_rs_5_prime_start = form.d_rs_5_prime_start.data
    object.d_rs_5_prime_end = form.d_rs_5_prime_end.data
    object.j_rs_start = form.j_rs_start.data
    object.j_rs_end = form.j_rs_end.data
    object.paralogs = form.paralogs.data
    object.notes = form.notes.data

    if new:
        db.session.add(object)
        
    db.session.commit()   



def populate_GeneDescription(db, object, form):   
    form.description_id.data = object.description_id
    form.author.data = object.author
    form.lab_address.data = object.lab_address
    form.release_version.data = object.release_version
    form.release_date.data = object.release_date
    form.release_description.data = object.release_description
    form.organism.data = object.organism
    form.sequence_name.data = object.sequence_name
    form.alt_names.data = object.alt_names
    form.locus.data = object.locus
    form.domain.data = object.domain
    form.functional.data = object.functional
    form.inference_type.data = object.inference_type
    form.affirmation_level.data = object.affirmation_level
    form.status.data = object.status
    form.gene_subgroup.data = object.gene_subgroup
    form.subgroup_designation.data = object.subgroup_designation
    form.allele_designation.data = object.allele_designation
    form.sequence.data = object.sequence
    form.coding_seq_imgt.data = object.coding_seq_imgt
    form.codon_frame.data = object.codon_frame
    form.j_cdr3_end.data = object.j_cdr3_end
    form.utr_5_prime_start.data = object.utr_5_prime_start
    form.utr_5_prime_end.data = object.utr_5_prime_end
    form.l_region_start.data = object.l_region_start
    form.l_region_end.data = object.l_region_end
    form.v_rs_start.data = object.v_rs_start
    form.v_rs_end.data = object.v_rs_end
    form.d_rs_3_prime_start.data = object.d_rs_3_prime_start
    form.d_rs_3_prime_end.data = object.d_rs_3_prime_end
    form.d_rs_5_prime_start.data = object.d_rs_5_prime_start
    form.d_rs_5_prime_end.data = object.d_rs_5_prime_end
    form.j_rs_start.data = object.j_rs_start
    form.j_rs_end.data = object.j_rs_end
    form.paralogs.data = object.paralogs
    form.notes.data = object.notes



class GeneDescription_table(StyledTable):
    id = Col("id", show=False)


def make_GeneDescription_table(results, private = False, classes=()):
    t=create_table(base=GeneDescription_table)
    ret = t(results, classes=classes)
    return ret

class GeneDescription_view(Table):
    item = ViewCol("", column_html_attrs={"class": "col-sm-3 text-right font-weight-bold view-table-row"})
    value = Col("")


def make_GeneDescription_view(sub, private = False):
    ret = GeneDescription_view([])
    ret.items.append({"item": "Sequence ID", "value": sub.description_id, "tooltip": "Unique identifier of this gene sequence"})
    ret.items.append({"item": "Author", "value": sub.author, "tooltip": "Corresponding author"})
    ret.items.append({"item": "Author address", "value": sub.lab_address, "tooltip": "Institutional address of corresponding author"})
    ret.items.append({"item": "Version", "value": sub.release_version, "tooltip": "Version number of this record, updated whenever a revised version is published or released"})
    ret.items.append({"item": "Release Date", "value": sub.release_date, "tooltip": "Date of this release"})
    ret.items.append({"item": "release notes", "value": sub.release_description, "tooltip": "Brief descriptive notes of the reason for this release and the changes embodied"})
    ret.items.append({"item": "Organism", "value": sub.organism, "tooltip": "Binomial designation of subject's species"})
    ret.items.append({"item": "Sequence Name", "value": sub.sequence_name, "tooltip": "The canonical name of this sequence (i.e., the name which the curators determine should be used by preference)"})
    ret.items.append({"item": "Alternative names", "value": sub.alt_names, "tooltip": "Alternative names for this sequence"})
    ret.items.append({"item": "Locus", "value": sub.locus, "tooltip": "Gene locus"})
    ret.items.append({"item": "Domain", "value": sub.domain, "tooltip": "Sequence domain (V, D, J or Constant)"})
    ret.items.append({"item": "functional", "value": sub.functional, "tooltip": "Functional"})
    ret.items.append({"item": "inference_type", "value": sub.inference_type, "tooltip": "Type of inference(s) from which this gene sequence was inferred (Genomic and Rearranged, Genomic Only, Rearranged Only)"})
    ret.items.append({"item": "Affirmation Level", "value": sub.affirmation_level, "tooltip": "Count of independent studies in which this allele as been affirmed by IARC (1,2,3 or more)"})
    ret.items.append({"item": "status", "value": sub.status, "tooltip": "Status of record"})
    ret.items.append({"item": "Gene Subgroup", "value": sub.gene_subgroup, "tooltip": "Gene subgroup (family), as (and if) identified for this species and gene"})
    ret.items.append({"item": "Gene Designation", "value": sub.subgroup_designation, "tooltip": "Gene designation within this subgroup"})
    ret.items.append({"item": "Allele Designation", "value": sub.allele_designation, "tooltip": "Allele designation"})
    ret.items.append({"item": "Full Sequence", "value": sub.sequence, "tooltip": "nt sequence of the gene. This should cover the full length that is available, including where possible 5' UTR and lead-in for V-gene sequences"})
    ret.items.append({"item": "Coding Sequence", "value": sub.coding_seq_imgt, "tooltip": "nucleotide sequence of the coding region, aligned, in the case of a V-gene, with the IMGT numbering scheme"})
    ret.items.append({"item": "Codon Frame", "value": sub.codon_frame, "tooltip": "Codon position of the first sequence symbol in the Coding Sequence. Mandatory for J genes. Not used for V or D genes. ('1' means the sequence is in-frame, '2' means that the first bp is missing from the first codon, '3' means that the first 2 bp are missing)"})
    ret.items.append({"item": "J CDR3 End", "value": sub.j_cdr3_end, "tooltip": "In the case of a J-gene, the co-ordinate in the Coding Sequence of the first nucelotide of the conserved PHE or TRP (IMGT codon position 118)"})
    ret.items.append({"item": "UTR 5' Start", "value": sub.utr_5_prime_start, "tooltip": "Start co-ordinate in the Full Sequence of 5 prime UTR"})
    ret.items.append({"item": "UTR 5' End", "value": sub.utr_5_prime_end, "tooltip": "End co-ordinate in the Full Sequence of 5 prime UTR"})
    ret.items.append({"item": "L Region Start", "value": sub.l_region_start, "tooltip": "Start co-ordinate in the Full Sequence of L region"})
    ret.items.append({"item": "L Region End", "value": sub.l_region_end, "tooltip": "End co-ordinate in the Full Sequence of L region"})
    ret.items.append({"item": "v_rs_start", "value": sub.v_rs_start, "tooltip": "Start co-ordinate in the Full Sequence of V recombination site (V genes only)"})
    ret.items.append({"item": "v_rs_end", "value": sub.v_rs_end, "tooltip": "End co-ordinate in the Full Sequence of V recombination site (V-genes only)"})
    ret.items.append({"item": "d_rs_3_prime_start", "value": sub.d_rs_3_prime_start, "tooltip": "Start co-ordinate in the Full Sequence of 3 prime D recombination site (D-genes only)"})
    ret.items.append({"item": "d_rs_3_prime_end", "value": sub.d_rs_3_prime_end, "tooltip": "End co-ordinate in the Full Sequence of 3 prime D recombination site (D-genes only)"})
    ret.items.append({"item": "d_rs_5_prime_start", "value": sub.d_rs_5_prime_start, "tooltip": "Start co-ordinate in the Full Sequence of 5 prime D recombination site (D-genes only)"})
    ret.items.append({"item": "d_rs_5_prime_end", "value": sub.d_rs_5_prime_end, "tooltip": "End co-ordinate in the Full Sequence of 5 prime D recombination site (D-genes only)"})
    ret.items.append({"item": "j_rs_start", "value": sub.j_rs_start, "tooltip": "Start co-ordinate in the Full Sequence of J recombination site (J-genes only)"})
    ret.items.append({"item": "j_rs_end", "value": sub.j_rs_end, "tooltip": "End co-ordinate in the Full Sequence of J recombination site (J-genes only)"})
    ret.items.append({"item": "paralogs", "value": sub.paralogs, "tooltip": "Canonical names of 0 or more paralogs"})
    ret.items.append({"item": "Notes", "value": sub.notes, "tooltip": "Notes"})
    return ret

