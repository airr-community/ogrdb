
# ORM definitions for AttachedFile
# This file is automatically generated from the schema by schema/build_from_schema.py

from head import db
from db.userdb import User
from db.styled_table import *
from flask_table import Table, Col, LinkCol, create_table
from db.view_table import ViewCol
from sqlalchemy.orm import backref

class AttachedFile(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(1000))
    notes_id = db.Column(db.Integer, db.ForeignKey('notes_entry.id'))
    notes_entry = db.relationship('NotesEntry', backref = 'attached_files')
    gene_description_id = db.Column(db.Integer, db.ForeignKey('gene_description.id'))
    gene_description = db.relationship('GeneDescription', backref = 'attached_files')
    novel_vdjbase_id = db.Column(db.Integer, db.ForeignKey('novel_vdjbase.id'))
    novel_vdjbase = db.relationship('NovelVdjbase', backref = 'attached_files')


def save_AttachedFile(db, object, form, new=False):   
    object.filename = form.filename.data

    if new:
        db.session.add(object)
        
    db.session.commit()   



def populate_AttachedFile(db, object, form):   
    form.filename.data = object.filename




def copy_AttachedFile(c_from, c_to):   
    c_to.filename = c_from.filename



class AttachedFile_table(StyledTable):
    id = Col("id", show=False)
    filename = StyledCol("Attachment File Name", tooltip="Filename as provided by user")


def make_AttachedFile_table(results, private = False, classes=()):
    t = create_table(base=AttachedFile_table)
    ret = t(results, classes=classes)
    return ret

class AttachedFile_view(Table):
    item = ViewCol("", column_html_attrs={"class": "col-sm-3 text-right font-weight-bold view-table-row"})
    value = Col("")


def make_AttachedFile_view(sub, private = False):
    ret = AttachedFile_view([])
    ret.items.append({"item": "Attachment File Name", "value": sub.filename, "tooltip": "Filename as provided by user", "field": "filename"})
    return ret

