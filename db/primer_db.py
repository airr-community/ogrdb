
# ORM definitions for Primer
# This file is automatically generated from the schema by schema/build_from_schema.py

from head import db
from db.userdb import User
from db.styled_table import *
from flask_table import Table, Col, LinkCol, create_table
from db.view_table import ViewCol
from sqlalchemy.orm import backref

class Primer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    primer_name = db.Column(db.String(1000))
    primer_seq = db.Column(db.String(1000))
    primer_set_id = db.Column(db.Integer, db.ForeignKey('primer_set.id'))
    primer_set = db.relationship('PrimerSet', backref = 'primers')


def save_Primer(db, object, form, new=False):   
    object.primer_name = form.primer_name.data
    object.primer_seq = form.primer_seq.data

    if new:
        db.session.add(object)
        
    db.session.commit()   



def populate_Primer(db, object, form):   
    form.primer_name.data = object.primer_name
    form.primer_seq.data = object.primer_seq




def copy_Primer(c_from, c_to):   
    c_to.primer_name = c_from.primer_name
    c_to.primer_seq = c_from.primer_seq



class Primer_table(StyledTable):
    id = Col("id", show=False)
    primer_name = StyledCol("Primer Name", tooltip="Primer name or quick description")
    primer_seq = StyledCol("Primer Sequence", tooltip="primer sequence (may contain ambiguous characters)")


def make_Primer_table(results, private = False, classes=()):
    t = create_table(base=Primer_table)
    ret = t(results, classes=classes)
    return ret

class Primer_view(Table):
    item = ViewCol("", column_html_attrs={"class": "view-table-row"})
    value = Col("")


def make_Primer_view(sub, private = False):
    ret = Primer_view([])
    ret.items.append({"item": "Primer Name", "value": sub.primer_name, "tooltip": "Primer name or quick description", "field": "primer_name"})
    ret.items.append({"item": "Primer Sequence", "value": sub.primer_seq, "tooltip": "primer sequence (may contain ambiguous characters)", "field": "primer_seq"})
    return ret

