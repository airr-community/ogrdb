# generated by datamodel-codegen:
#   filename:  ogrdb-api-openapi3.yaml
#   timestamp: 2025-04-30T16:03:33+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class Contact(BaseModel):
    name: Optional[str] = None
    url: Optional[str] = None
    email: Optional[str] = None


class License(BaseModel):
    name: str
    url: Optional[str] = None


class InfoObject(BaseModel):
    title: str
    version: str
    description: Optional[str] = None
    contact: Optional[Contact] = None
    license: Optional[License] = None


class Ontology(BaseModel):
    id: Optional[str] = Field(
        None, description='CURIE of the concept, encoding the ontology and the local ID'
    )
    label: Optional[str] = Field(
        None, description='Label of the concept in the respective ontology'
    )


class GermlineSpeciesResponseItem(BaseModel):
    germline_set_id: Optional[str] = None
    germline_set_name: Optional[str] = None
    species: Optional[Ontology] = None
    species_subgroup: Optional[str] = None
    species_subgroup_type: Optional[str] = None
    locus: Optional[str] = None


class GermlineSpeciesResponse(BaseModel):
    germline_species: List[GermlineSpeciesResponseItem]


class SpeciesSubgroupTypeEnum(Enum):
    breed = 'breed'
    strain = 'strain'
    inbred = 'inbred'
    outbred = 'outbred'
    locational = 'locational'


class SpeciesSubgroupType(RootModel[Optional[SpeciesSubgroupTypeEnum]]):
    root: Optional[SpeciesSubgroupTypeEnum] = None


class Locus(Enum):
    IGH = 'IGH'
    IGI = 'IGI'
    IGK = 'IGK'
    IGL = 'IGL'
    TRA = 'TRA'
    TRB = 'TRB'
    TRG = 'TRG'
    TRD = 'TRD'


class Acknowledgement(BaseModel):
    acknowledgement_id: Optional[str] = Field(
        ..., description='unique identifier of this Acknowledgement within the file'
    )
    name: Optional[str] = Field(..., description='Full name of individual')
    institution_name: Optional[str] = Field(
        ..., description="Individual's department and institution name"
    )
    orcid_id: Optional[str] = Field(None, description="Individual's ORCID identifier")


class SequenceType(Enum):
    V = 'V'
    D = 'D'
    J = 'J'
    C = 'C'


class InferenceTypeEnum(Enum):
    genomic_and_rearranged = 'genomic_and_rearranged'
    genomic_only = 'genomic_only'
    rearranged_only = 'rearranged_only'


class InferenceType(RootModel[Optional[InferenceTypeEnum]]):
    root: Optional[InferenceTypeEnum] = Field(
        None,
        description='Type of inference(s) from which this gene sequence was inferred',
    )


class SpeciesSubgroupType1Enum(Enum):
    breed = 'breed'
    strain = 'strain'
    inbred = 'inbred'
    outbred = 'outbred'
    locational = 'locational'


class SpeciesSubgroupType1(RootModel[Optional[SpeciesSubgroupType1Enum]]):
    root: Optional[SpeciesSubgroupType1Enum] = None


class StatusEnum(Enum):
    active = 'active'
    draft = 'draft'
    retired = 'retired'
    withdrawn = 'withdrawn'


class Status(RootModel[Optional[StatusEnum]]):
    root: Optional[StatusEnum] = Field(
        None, description='Status of record, assumed active if the field is not present'
    )


class JCodonFrame(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_None = None


class CurationalTag(Enum):
    likely_truncated = 'likely_truncated'
    likely_full_length = 'likely_full_length'


class DerivationEnum(Enum):
    DNA = 'DNA'
    RNA = 'RNA'


class Derivation(RootModel[Optional[DerivationEnum]]):
    root: Optional[DerivationEnum] = Field(
        None,
        description='The class of nucleic acid that was used as primary starting material',
    )


class ObservationType(Enum):
    direct_sequencing = 'direct_sequencing'
    inference_from_repertoire = 'inference_from_repertoire'


class RearrangedSequence(BaseModel):
    sequence_id: Optional[str] = Field(
        ...,
        description='Unique identifier of this RearrangedSequence within the file, typically generated by the repository  hosting the schema, for example from the underlying ID of the database record.\n',
    )
    sequence: str = Field(..., description='nucleotide sequence')
    derivation: Optional[Derivation] = Field(
        ...,
        description='The class of nucleic acid that was used as primary starting material',
    )
    observation_type: ObservationType = Field(
        ...,
        description='The type of observation from which this sequence was drawn, such as direct sequencing or  inference from repertoire sequencing data.\n',
    )
    curation: Optional[str] = Field(
        None, description='Curational notes on the sequence'
    )
    repository_name: Optional[str] = Field(
        ...,
        description='Name of the repository in which the sequence has been deposited',
    )
    repository_ref: Optional[str] = Field(
        None,
        description='Queryable id or accession number of the sequence published by the repository',
    )
    deposited_version: Optional[str] = Field(
        ..., description='Version number of the sequence within the repository'
    )
    sequence_start: Optional[int] = Field(
        None,
        description='Start co-ordinate of the sequence detailed in this record, within the sequence deposited',
    )
    sequence_end: Optional[int] = Field(
        None,
        description='End co-ordinate of the sequence detailed in this record, within the sequence deposited',
    )


class SequenceDelineationV(BaseModel):
    sequence_delineation_id: Optional[str] = Field(
        ...,
        description='Unique identifier of this SequenceDelineationV within the file. Typically, generated by the  repository hosting the record.\n',
    )
    delineation_scheme: Optional[str] = Field(
        ..., description='Name of the delineation scheme', examples=['Chothia']
    )
    unaligned_sequence: Optional[str] = Field(
        None, description='entire V-sequence covered by this delineation'
    )
    aligned_sequence: Optional[str] = Field(
        None,
        description='Aligned sequence if this delineation provides an alignment. An aligned sequence should always be  provided for IMGT delineations.\n',
    )
    fwr1_start: Optional[int] = Field(
        ..., description="FWR1 start co-ordinate in the 'unaligned sequence' field"
    )
    fwr1_end: Optional[int] = Field(
        ..., description="FWR1 end co-ordinate in the 'unaligned sequence' field"
    )
    cdr1_start: Optional[int] = Field(
        ..., description="CDR1 start co-ordinate in the 'unaligned sequence' field"
    )
    cdr1_end: Optional[int] = Field(
        ..., description="CDR1 end co-ordinate in the 'unaligned sequence' field"
    )
    fwr2_start: Optional[int] = Field(
        ..., description="FWR2 start co-ordinate in the 'unaligned sequence' field"
    )
    fwr2_end: Optional[int] = Field(
        ..., description="FWR2 end co-ordinate in the 'unaligned sequence' field"
    )
    cdr2_start: Optional[int] = Field(
        ..., description="CDR2 start co-ordinate in the 'unaligned sequence' field"
    )
    cdr2_end: Optional[int] = Field(
        ..., description="CDR2 end co-ordinate in the 'unaligned sequence' field"
    )
    fwr3_start: Optional[int] = Field(
        ..., description="FWR3 start co-ordinate in the 'unaligned sequence' field"
    )
    fwr3_end: Optional[int] = Field(
        ..., description="FWR3 end co-ordinate in the 'unaligned sequence' field"
    )
    cdr3_start: Optional[int] = Field(
        ..., description="CDR3 start co-ordinate in the 'unaligned sequence' field"
    )
    alignment_labels: Optional[List[str]] = Field(
        None,
        description='One string for each codon in the aligned_sequence indicating the label of that codon according to  the numbering of the delineation scheme if it provides one.\n',
    )


class StrandEnum(Enum):
    field_ = '+'
    field__1 = '-'


class Strand(RootModel[Optional[StrandEnum]]):
    root: Optional[StrandEnum] = Field(None, description='sense (+ or -)')


class UnrearrangedSequence(BaseModel):
    sequence_id: Optional[str] = Field(
        ...,
        description='unique identifier of this UnrearrangedSequence within the file',
    )
    sequence: str = Field(
        ...,
        description='Sequence of interest described in this record. Typically, this will include gene and promoter region.\n',
    )
    curation: Optional[str] = Field(
        None, description='Curational notes on the sequence'
    )
    repository_name: Optional[str] = Field(
        ...,
        description='Name of the repository in which the assembly or contig is deposited',
    )
    repository_ref: Optional[str] = Field(
        None,
        description='Queryable id or accession number of the sequence published by the repository',
    )
    patch_no: Optional[str] = Field(
        None,
        description='Genome assembly patch number in which this gene was determined',
    )
    gff_seqid: Optional[str] = Field(
        ...,
        description='Sequence (from the assembly) of a window including the gene and preferably also the promoter region.\n',
    )
    gff_start: Optional[int] = Field(
        ...,
        description='Genomic co-ordinates of the start of the sequence of interest described in this record in  Ensemble GFF version 3.\n',
    )
    gff_end: Optional[int] = Field(
        ...,
        description='Genomic co-ordinates of the end of the sequence of interest described in this record in  Ensemble GFF version 3.\n',
    )
    strand: Optional[Strand] = Field(..., description='sense (+ or -)')


class VersionsResponse(BaseModel):
    versions: Optional[List[float]] = None


class ErrorResponse(BaseModel):
    message: Optional[str] = Field(None, description='Detail about the error')


class ServiceInfoObject(InfoObject):
    api: Optional[InfoObject] = None
    schema_: Optional[InfoObject] = Field(None, alias='schema')


class SpeciesResponse(BaseModel):
    species: Optional[List[Ontology]] = None


class AlleleDescription(BaseModel):
    allele_description_id: Optional[str] = Field(
        ...,
        description='Unique identifier of this AlleleDescription within the file. Typically, generated by the  repository hosting the record.\n',
    )
    allele_description_ref: Optional[str] = Field(
        None,
        description='Unique reference to the allele description, in standardized form (Repo:Label:Version)',
        examples=['OGRDB:Human_IGH:IGHV1-69*01.001'],
    )
    maintainer: Optional[str] = Field(
        ..., description='Maintainer of this sequence record'
    )
    acknowledgements: Optional[List[Acknowledgement]] = Field(
        None,
        description='List of individuals whose contribution to the gene description should be acknowledged',
    )
    lab_address: Optional[str] = Field(
        ..., description='Institution and full address of corresponding author'
    )
    release_version: Optional[int] = Field(
        ...,
        description='Version number of this record, updated whenever a revised version is published or released',
    )
    release_date: Optional[datetime] = Field(
        ...,
        description='Date of this release',
        examples=['2021-02-02'],
        title='Release Date',
    )
    release_description: Optional[str] = Field(
        ...,
        description='Brief descriptive notes of the reason for this release and the changes embodied',
    )
    label: Optional[str] = Field(
        None,
        description='The accepted name for this gene or allele following the relevant nomenclature. The value in this field should correspond to values in acceptable name fields of other schemas,  such as v_call, d_call, and j_call fields.\n',
        examples=['IGHV1-69*01'],
    )
    sequence: str = Field(
        ...,
        description="Nucleotide sequence of the gene. This should cover the full length that is available,  including where possible RSS, and 5' UTR and lead-in for V-gene sequences.\n",
    )
    coding_sequence: Optional[str] = Field(
        ...,
        description='Nucleotide sequence of the core coding region, such as the coding region of a D-, J- or C- gene  or the coding region of a V-gene excluding the leader.\n',
    )
    aliases: Optional[List[str]] = Field(
        None, description='Alternative names for this sequence'
    )
    locus: Locus = Field(..., description='Gene locus')
    chromosome: Optional[int] = Field(
        None, description='chromosome on which the gene is located'
    )
    sequence_type: SequenceType = Field(..., description='Sequence type (V, D, J, C)')
    functional: Optional[bool] = Field(
        ..., description='True if the gene is functional, false if it is a pseudogene'
    )
    inference_type: Optional[InferenceType] = Field(
        ...,
        description='Type of inference(s) from which this gene sequence was inferred',
    )
    species: Ontology = Field(
        ...,
        description="Binomial designation of subject's species",
        examples=[{'id': 'NCBITAXON:9606', 'label': 'Homo sapiens'}],
        title='Organism',
    )
    species_subgroup: Optional[str] = Field(
        None,
        description='Race, strain or other species subgroup to which this subject belongs',
        examples=['BALB/c'],
    )
    species_subgroup_type: Optional[SpeciesSubgroupType1] = None
    status: Optional[Status] = Field(
        None, description='Status of record, assumed active if the field is not present'
    )
    subgroup_designation: Optional[str] = Field(
        None,
        description='Identifier of the gene subgroup or clade, as (and if) defined',
    )
    gene_designation: Optional[str] = Field(
        None, description='Gene number or other identifier, as (and if) defined'
    )
    allele_designation: Optional[str] = Field(
        None, description='Allele number or other identifier, as (and if) defined'
    )
    allele_similarity_cluster_designation: Optional[str] = Field(
        None,
        description='ID of the similarity cluster used in this germline set, if designated',
    )
    allele_similarity_cluster_member_id: Optional[str] = Field(
        None,
        description='Membership ID of the allele within the similarity cluster, if a cluster is designated',
    )
    j_codon_frame: Optional[JCodonFrame] = Field(
        None,
        description="Codon position of the first nucleotide in the 'coding_sequence' field. Mandatory for J genes.  Not used for V or D genes. '1' means the sequence is in-frame, '2' means that the first bp is  missing from the first codon, and '3' means that the first 2 bp are missing.\n",
    )
    gene_start: Optional[int] = Field(
        None,
        description='Co-ordinate in the sequence field of the first nucleotide in the coding_sequence field.\n',
    )
    gene_end: Optional[int] = Field(
        None,
        description='Co-ordinate in the sequence field of the last gene-coding nucleotide in the coding_sequence field.\n',
    )
    utr_5_prime_start: Optional[int] = Field(
        None,
        description='Start co-ordinate in the sequence field of the 5 prime UTR (V-genes only).',
    )
    utr_5_prime_end: Optional[int] = Field(
        None,
        description='End co-ordinate in the sequence field of the 5 prime UTR (V-genes only).',
    )
    leader_1_start: Optional[int] = Field(
        None,
        description='Start co-ordinate in the sequence field of L-PART1 (V-genes only).',
    )
    leader_1_end: Optional[int] = Field(
        None,
        description='End co-ordinate in the sequence field of L-PART1 (V-genes only).',
    )
    leader_2_start: Optional[int] = Field(
        None,
        description='Start co-ordinate in the sequence field of L-PART2 (V-genes only).',
    )
    leader_2_end: Optional[int] = Field(
        None,
        description='End co-ordinate in the sequence field of L-PART2 (V-genes only).',
    )
    v_rs_start: Optional[int] = Field(
        None,
        description='Start co-ordinate in the sequence field of the V recombination site (V-genes only).',
    )
    v_rs_end: Optional[int] = Field(
        None,
        description='End co-ordinate in the sequence field of the V recombination site (V-genes only).',
    )
    d_rs_3_prime_start: Optional[int] = Field(
        None,
        description='Start co-ordinate in the sequence field of the 3 prime D recombination site (D-genes only).',
    )
    d_rs_3_prime_end: Optional[int] = Field(
        None,
        description='End co-ordinate in the sequence field of the 3 prime D recombination site (D-genes only).',
    )
    d_rs_5_prime_start: Optional[int] = Field(
        None,
        description='Start co-ordinate in the sequence field of the 5 prime D recombination site (D-genes only).',
    )
    d_rs_5_prime_end: Optional[int] = Field(
        None,
        description='End co-ordinate in the sequence field of 5 the prime D recombination site (D-genes only).',
    )
    j_cdr3_end: Optional[int] = Field(
        None,
        description='In the case of a J-gene, the co-ordinate in the sequence field of the first nucelotide of the  conserved PHE or TRP (IMGT codon position 118).\n',
    )
    j_rs_start: Optional[int] = Field(
        None,
        description='Start co-ordinate in the sequence field of J recombination site (J-genes only).',
    )
    j_rs_end: Optional[int] = Field(
        None,
        description='End co-ordinate in the sequence field of J recombination site (J-genes only).',
    )
    j_donor_splice: Optional[int] = Field(
        None,
        description="Co-ordinate in the sequence field of the final 3' nucleotide of the J-REGION (J-genes only).",
    )
    v_gene_delineations: Optional[List[SequenceDelineationV]] = None
    unrearranged_support: Optional[List[UnrearrangedSequence]] = None
    rearranged_support: Optional[List[RearrangedSequence]] = None
    paralogs: Optional[List[str]] = Field(
        None, description='Gene symbols of any paralogs'
    )
    curation: Optional[str] = Field(
        None,
        description='Curational notes on the AlleleDescription. This can be used to give more extensive notes on the  decisions taken than are provided in the release_description.\n',
    )
    curational_tags: Optional[List[CurationalTag]] = Field(
        None, description='Controlled-vocabulary tags applied to this description'
    )


class GermlineSet(BaseModel):
    germline_set_id: Optional[str] = Field(
        ...,
        description='Unique identifier of the GermlineSet within this file. Typically, generated by the  repository hosting the record.\n',
    )
    author: Optional[str] = Field(..., description='Corresponding author')
    lab_name: Optional[str] = Field(
        ..., description='Department of corresponding author'
    )
    lab_address: Optional[str] = Field(
        ..., description='Institutional address of corresponding author'
    )
    acknowledgements: Optional[List[Acknowledgement]] = Field(
        None,
        description='List of individuals whose contribution to the germline set should be acknowledged',
    )
    release_version: Optional[float] = Field(
        ..., description='Version number of this record, allocated automatically'
    )
    release_description: Optional[str] = Field(
        ...,
        description='Brief descriptive notes of the reason for this release and the changes embodied',
    )
    release_date: Optional[datetime] = Field(
        ...,
        description='Date of this release',
        examples=['2021-02-02'],
        title='Release Date',
    )
    germline_set_name: Optional[str] = Field(
        ..., description='descriptive name of this germline set'
    )
    germline_set_ref: Optional[str] = Field(
        ...,
        description='Unique identifier of the germline set and version, in standardized form (Repo:Label:Version)',
        examples=['OGRDB:Human_IGH:2021.11'],
    )
    pub_ids: Optional[str] = Field(
        None,
        description='Publications describing the germline set',
        examples=['PMID:85642,PMID:12345'],
    )
    species: Ontology = Field(
        ...,
        description="Binomial designation of subject's species",
        examples=[{'id': 'NCBITAXON:9606', 'label': 'Homo sapiens'}],
        title='Organism',
    )
    species_subgroup: Optional[str] = Field(
        None,
        description='Race, strain or other species subgroup to which this subject belongs',
        examples=['BALB/c'],
    )
    species_subgroup_type: Optional[SpeciesSubgroupType] = None
    locus: Locus = Field(..., description='Gene locus')
    allele_descriptions: Optional[List[AlleleDescription]] = Field(
        ..., description='list of allele_descriptions in the germline set'
    )
    curation: Optional[str] = Field(
        None,
        description='Curational notes on the GermlineSet. This can be used to give more extensive notes on the  decisions taken than are provided in the release_description.\n',
    )


class GermlineSetList(BaseModel):
    items: List[GermlineSet]


class GermlineSetResponse(BaseModel):
    Info: Optional[InfoObject] = None
    germline_set_class: List[GermlineSet] = Field(None, alias='GermlineSet')
